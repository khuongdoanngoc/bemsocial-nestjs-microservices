### Variables
@baseUrl = http://localhost:3000
@userId = 68cd3ed4f14824676db4ce9e
@authToken = Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4Y2QzZWQ0ZjE0ODI0Njc2ZGI0Y2U5ZSIsImVtYWlsIjoiZ3Vlc3RAZ3Vlc3QuY29tIiwicm9sZSI6IlVTRVIiLCJpYXQiOjE3NTg2MTU2NjgsImV4cCI6MTc1ODYxOTI2OH0.dRIKYwfqBc33vqiHSswlkfi-ubmh3AP0ibsxEIZcfvw

### 1. T·∫°o Post m·ªõi
POST {{baseUrl}}/posts
Content-Type: application/json
Authorization: {{authToken}}

{
  "content": "ƒê√¢y l√† post test ƒë·∫ßu ti√™n! üöÄ",
  "images": [
    "https://example.com/image1.jpg",
    "https://example.com/image2.jpg"
  ]
}

### 2. L·∫•y t·∫•t c·∫£ posts (ƒë·ªÉ xem post v·ª´a t·∫°o)
GET {{baseUrl}}/posts?page=1&limit=10
Authorization: {{authToken}}

### 3. L·∫•y post theo ID (thay POST_ID b·∫±ng ID th·ª±c t·ª´ response tr∆∞·ªõc)
@postId = REPLACE_WITH_ACTUAL_POST_ID
GET {{baseUrl}}/posts/{{postId}}
Authorization: {{authToken}}

### 4. Update Post
PUT {{baseUrl}}/posts/{{postId}}
Content-Type: application/json
Authorization: {{authToken}}

{
  "content": "Post ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t! ‚ú® N·ªôi dung m·ªõi v·ªõi emoji",
  "images": [
    "https://example.com/updated-image1.jpg"
  ]
}

### 5. L·∫•y posts c·ªßa user c·ª• th·ªÉ
GET {{baseUrl}}/posts/user/{{userId}}?page=1&limit=5
Authorization: {{authToken}}

### 6. Like Post
POST {{baseUrl}}/posts/{{postId}}/like
Authorization: {{authToken}}

### 7. Unlike Post  
DELETE {{baseUrl}}/posts/{{postId}}/like
Authorization: {{authToken}}

### 8. Xem likes c·ªßa post
GET {{baseUrl}}/posts/{{postId}}/likes?page=1&limit=10
Authorization: {{authToken}}

### 9. X√≥a Post
DELETE {{baseUrl}}/posts/{{postId}}
Authorization: {{authToken}}

### 10. Verify post ƒë√£ b·ªã x√≥a (should return 404)
GET {{baseUrl}}/posts/{{postId}}
Authorization: {{authToken}}

### ========== COMMENT TESTS ==========

### 11. T·∫°o Comment cho post
POST {{baseUrl}}/comments
Content-Type: application/json
Authorization: {{authToken}}

{
  "content": "ƒê√¢y l√† comment test! üí¨",
  "postId": "{{postId}}"
}

### 12. L·∫•y comments c·ªßa post
GET {{baseUrl}}/comments/post/{{postId}}?page=1&limit=10
Authorization: {{authToken}}

### 13. Update Comment (thay COMMENT_ID b·∫±ng ID th·ª±c)
@commentId = REPLACE_WITH_ACTUAL_COMMENT_ID
PUT {{baseUrl}}/comments/{{commentId}}
Content-Type: application/json
Authorization: {{authToken}}

{
  "content": "Comment ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t! üîÑ"
}

### 14. X√≥a Comment
DELETE {{baseUrl}}/comments/{{commentId}}
Authorization: {{authToken}}

### ========== ERROR TESTS ==========

### 15. Test t·∫°o post v·ªõi content r·ªóng (should fail validation)
POST {{baseUrl}}/posts
Content-Type: application/json
Authorization: {{authToken}}

{
  "content": "",
  "images": []
}

### 16. Test update post kh√¥ng t·ªìn t·∫°i (should return 404)
PUT {{baseUrl}}/posts/507f1f77bcf86cd799439011
Content-Type: application/json
Authorization: {{authToken}}

{
  "content": "Test update post kh√¥ng t·ªìn t·∫°i"
}

### 17. Test x√≥a post kh√¥ng t·ªìn t·∫°i (should return 404)
DELETE {{baseUrl}}/posts/507f1f77bcf86cd799439011
Authorization: {{authToken}}

### 18. Test kh√¥ng c√≥ authorization (should return 401)
GET {{baseUrl}}/posts

### ========== BULK DATA TESTS ==========

### 19. T·∫°o nhi·ªÅu posts ƒë·ªÉ test pagination
POST {{baseUrl}}/posts
Content-Type: application/json
Authorization: {{authToken}}

{
  "content": "Post s·ªë 1 cho test pagination üìù"
}

###
POST {{baseUrl}}/posts
Content-Type: application/json
Authorization: {{authToken}}

{
  "content": "Post s·ªë 2 cho test pagination üìÑ"
}

###
POST {{baseUrl}}/posts
Content-Type: application/json
Authorization: {{authToken}}

{
  "content": "Post s·ªë 3 cho test pagination üìã"
}

### 20. Test pagination v·ªõi limit nh·ªè
GET {{baseUrl}}/posts?page=1&limit=2
Authorization: {{authToken}}

###
GET {{baseUrl}}/posts?page=2&limit=2
Authorization: {{authToken}}
